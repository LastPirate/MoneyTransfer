/*
 * This file is generated by jOOQ.
 */
package com.hometask.moneytransfer.model.tables;


import com.hometask.moneytransfer.model.Indexes;
import com.hometask.moneytransfer.model.Keys;
import com.hometask.moneytransfer.model.Public;
import com.hometask.moneytransfer.model.tables.records.WalletRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Wallet extends TableImpl<WalletRecord> {

    private static final long serialVersionUID = -1073173472;

    /**
     * The reference instance of <code>PUBLIC.WALLET</code>
     */
    public static final Wallet WALLET = new Wallet();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WalletRecord> getRecordType() {
        return WalletRecord.class;
    }

    /**
     * The column <code>PUBLIC.WALLET.ID</code>.
     */
    public final TableField<WalletRecord, Long> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.WALLET.CURRENCY</code>.
     */
    public final TableField<WalletRecord, String> CURRENCY = createField(DSL.name("CURRENCY"), org.jooq.impl.SQLDataType.VARCHAR(3).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.WALLET.ADDRESS</code>.
     */
    public final TableField<WalletRecord, String> ADDRESS = createField(DSL.name("ADDRESS"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.WALLET.BALANCE</code>.
     */
    public final TableField<WalletRecord, BigDecimal> BALANCE = createField(DSL.name("BALANCE"), org.jooq.impl.SQLDataType.DECIMAL.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.WALLET.ACCOUNT_ID</code>.
     */
    public final TableField<WalletRecord, Long> ACCOUNT_ID = createField(DSL.name("ACCOUNT_ID"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.WALLET</code> table reference
     */
    public Wallet() {
        this(DSL.name("WALLET"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.WALLET</code> table reference
     */
    public Wallet(String alias) {
        this(DSL.name(alias), WALLET);
    }

    /**
     * Create an aliased <code>PUBLIC.WALLET</code> table reference
     */
    public Wallet(Name alias) {
        this(alias, WALLET);
    }

    private Wallet(Name alias, Table<WalletRecord> aliased) {
        this(alias, aliased, null);
    }

    private Wallet(Name alias, Table<WalletRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Wallet(Table<O> child, ForeignKey<O, WalletRecord> key) {
        super(child, key, WALLET);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CONSTRAINT_INDEX_9, Indexes.PRIMARY_KEY_9);
    }

    @Override
    public Identity<WalletRecord, Long> getIdentity() {
        return Keys.IDENTITY_WALLET;
    }

    @Override
    public UniqueKey<WalletRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_9;
    }

    @Override
    public List<UniqueKey<WalletRecord>> getKeys() {
        return Arrays.<UniqueKey<WalletRecord>>asList(Keys.CONSTRAINT_9);
    }

    @Override
    public List<ForeignKey<WalletRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<WalletRecord, ?>>asList(Keys.CONSTRAINT_98);
    }

    public Account account() {
        return new Account(this, Keys.CONSTRAINT_98);
    }

    @Override
    public Wallet as(String alias) {
        return new Wallet(DSL.name(alias), this);
    }

    @Override
    public Wallet as(Name alias) {
        return new Wallet(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Wallet rename(String name) {
        return new Wallet(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Wallet rename(Name name) {
        return new Wallet(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, String, String, BigDecimal, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
